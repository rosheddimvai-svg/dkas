import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
import requests
import json
import random
import time

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ---
BOT_TOKEN = "7845699149:AAEEKpzHFt5gd6LbApfXSsE8de64f8IaGx0"
CURRENT_API = 'https://api.bdg88zf.com/api/webapi/GetGameIssue'
HISTORY_API = 'https://draw.ar-lottery01.com/WinGo/WinGo_1M/GetHistoryIssuePage.json'
REQUEST_DATA = { "typeId": 1, "language": 0, "random": "e7fe6c090da2495ab8290dac551ef1ed", "signature": "1F390E2B2D8A55D693E57FD905AE73A7", "timestamp": int(time.time()) }
# --- ‡¶§‡¶•‡ßç‡¶Ø ‡¶∂‡ßá‡¶∑ ---


# API ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶° (period) ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶¨‡ßá
async def get_current_period(api_url):
    try:
        response = requests.post(api_url, json=REQUEST_DATA)
        data = response.json()
        current_period = data['data']['issueId']
        return current_period
    except Exception as e:
        print(f"Error fetching current period: {e}")
        return None

# API ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ (history) ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶¨‡ßá
async def get_history_results(api_url):
    try:
        response = requests.get(api_url)
        data = response.json()
        history_list = data['data']['history']
        return history_list
    except Exception as e:
        print(f"Error fetching history: {e}")
        return []

# ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
def generate_signal(history):
    if not history:
        return "No history available to generate a signal."
    
    latest_result = history[0]
    
    if latest_result['isBig']:
        return "Big"
    elif latest_result['isSmall']:
        return "Small"
    else:
        return "No clear signal based on history."

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞: ‡¶è‡¶ü‡¶ø ‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("Get Signal", callback_data='get_signal')],
        [InlineKeyboardButton("Contact Admin", url="https://t.me/your_admin_username")],
        [InlineKeyboardButton("Rules", callback_data='rules')],
        [InlineKeyboardButton("Registration", url="https://api.bdg88zf.com/")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ü‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:', reply_markup=reply_markup)


# ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'get_signal':
        await get_signal(update, context)
    elif query.data == 'rules':
        await rules(update, context)

# ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞
async def get_signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶° ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ
        current_period = await get_current_period(CURRENT_API)
        history = await get_history_results(HISTORY_API)
        
        if current_period is None or not history:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="Sorry, I could not fetch the game information. Please try again later.")
            return
        
        signal = generate_signal(history)
        
        # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶∏‡¶π ‡¶§‡ßà‡¶∞‡¶ø
        signal_message = (
            f"üéØ **‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶°:** {current_period}\n"
            f"üí° **‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤:** ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ `{signal}` ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"
        )
        
        await context.bot.send_message(chat_id=update.effective_chat.id, text=signal_message, parse_mode='Markdown')
        
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ({e})")

# ‡¶∞‡ßÅ‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    rules_text = (
        "**‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:**\n"
        "1. ‡¶è‡¶á ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ WinGo 1M ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§\n"
        "2. ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶§‡ßÄ‡¶§ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶ì ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§\n"
        "3. ‡¶ñ‡ßá‡¶≤‡¶æ‡¶ü‡¶ø ‡¶®‡¶ø‡¶ú ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨‡ßá ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá‡¶®‡•§\n"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=rules_text, parse_mode='Markdown')

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
